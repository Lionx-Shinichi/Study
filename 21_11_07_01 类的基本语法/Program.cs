using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _21_11_07_01_类的基本语法
{
    class Program
    {
        static void Main(string[] args)
        {
            //创建Person类的对象（类的实例化），使用关键字new
            Person zhangSan = new Person();//Person这样的类也称为自定义类
            zhangSan.Name = "张三";
            zhangSan.Age = 18;
            zhangSan.Gender = '啥';
            zhangSan.Programming();
            Console.ReadKey();

            #region 笔记
            /*
            1.	面向对象的概念
            由面向过程演化而来，是一种编程思想
            1)	面向过程：面向的是完成这件事的过程，强调的是完成这件事的动作。
            举例：把大象塞进冰箱里。（多采用主动语法）
            1.	打开冰箱门
            2.	把大象塞进去
            3.	关闭冰箱门

            张三长得很瘦小，这个冰箱有可能很高，打不开冰箱，张三就踩着小板凳打开冰箱门，他自己没法把大象塞进去，就找了李四来帮忙把大象塞进去，然后踩着板凳关上冰箱门。
            李四有1米9那么高，他不需要踩着板凳就可以打开冰箱门，他的力气也很大，他自己就可以把大象塞到冰箱里，也可以不踩着板凳关上冰箱门。

            如果我们用面向过程的思想来解决这件事，那么当执行人不同的时候，我们需要为不同的执行人量身定做解决事情的方法，每当更改需求那么还需要为不同的执行人编写适合的执行方式。
            2)	面向对象：创立一个对象来完成这件事情，也就是屏蔽不同执行人的差距，尽量写出通用的代码。
            举例：把大象塞进冰箱 把冰箱作为对象（多采用被动语法）
            1.	冰箱门可以被打开
            2.	大象可以被塞进冰箱里
            3.	冰箱门可以被关闭
            张三调用了第一个方法，冰箱门打开了，张三只知道使用这个方法就可以打开冰箱门，但是不知道是怎么打开的，有可能是自己踩着板凳打开的，也有可能是李四帮忙打开的。
            张三调用了第二个方法，大象塞进了冰箱，张三不知道大象是怎么进去的，有可能是李四帮忙的，也有可能是大象自己进去的。
            张三调用了第三个方法，冰箱门关上了，张三不知道冰箱门是怎么关闭的，有可能是李四帮他关闭的，也有可能是自己踩着板凳关闭的。

            在这个过程中，张三的特征被屏蔽了。这样的话不同执行人使用的代码一摸一样。
            
            2.	寻找对象的技巧
            对象一般都是被动的，相对比较稳定不易变化的。
            举例：在黑板上画一个圆
            在这里要根据应用场景来选择对象
            如果将圆作为对象，语句就变成圆被画在黑板上，更适合把圆画在哪里的应用环境，比如可以修改成圆被画在墙上，圆被画在纸上等。
            如果将黑板作为对象，语句就变成黑板上被画上圆，更适合黑板上画什么的应用环境，比如可以修改成黑板上被画上方块，黑板上被画上星星等。
            
            3.	属性
            属性是对象的具有的各种特征，每个对象的每个属性都拥有特定值
            属性的作用就是保护字段，对字段的赋值和取值进行限制
            属性的本质就是两个方法，一个是get，一个是set
            属性是不储存有任何值的，所有的值均存储到了字段中，调取也是从字段中提取值
            因为访问字段都要通过属性，因此字段前不写public，修改成private
            Field 字段
            Methods 方法
            Properties 属性
            语法：
            [public] 值类型 属性名称(Pascal)
            {
                get {return 字段名称;}
                set {字段名称=value;}
            }
            但是，也不是每个属性都有get和set如果属性中缺少了get就会变成只写属性，缺少了set就会变成只读属性
            
            4.	访问修饰符private
            代表私有的，只能在当前类中访问
            不添加访问修饰符就默认是private
            字段在类当中应该写成私有的，只需要通过公共的属性访问即可
            
            5.	类
            我们把这些具有相同属性和相同方法的对象进一步封装，抽象出来了类这个概念。
            类就是一个模型，确定了对象应该具有的属性和方法。
            对象是根据类创建出来的。
            类可以理解成一张图纸，对象就像图纸中的内容。
            语法：
            [public] class 类名
            {
                字段，属性，方法
            }
            写好了类之后需要创建这个类的对象，我们把创建类的对象的过程称之为类的实例化，使用关键字 new.。
            当创建好一个类的对象后，需要给这个对象的每个属性去赋值，我们管这个过程称之为对象的初始化。
            类是不占用内存的，对象是占用内存的。
            也可以说是将类实例化后，对象就被附上了初值，也就在内存中开辟了空间。
            */
            #endregion
        }
    }
}
